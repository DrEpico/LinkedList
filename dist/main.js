(()=>{class t{constructor(t){this.value=t,this.next=null}}const e=new class{constructor(){this.head=null,this.tail=null}append(e){const n=new t(e);this.head?(this.tail.next=n,this.tail=n):(this.head=n,this.tail=n)}prepend(e){const n=new t(e);this.head?(n.next=this.head,this.head=n):(this.head=n,this.tail=n)}size(){let t=0,e=this.head;for(;!this.head;)t++,e=e.next;return t}head(){return this.head?this.head:null}tail(){return this.tail?this.tail:null}at(t){if(t<0)return null;if(this.head){let e=this.head,n=0;for(;n<t;)n++,e=e.next;return e||null}}pop(){if(!this.tail)return console.log("No item to pop"),null;const t=this.tail.value;if(this.head===this.tail)return this.head=null,this.tail=null,t;let e=this.head;for(;e.next!==this.tail;)e=e.next;return e.next=null,this.tail=e,t}contains(t){let e=this.head;for(;null!==e.next;){if(e.value===t)return!0;e=e.next}return!1}find(t){let e=this.head,n=0;for(;e;){if(e.value===t)return n;e=e.next,n++}return-1}toString(){let t="";if(this.head){let e=this.head;for(;e;){if(null===e.next)return t+"null";t+=`( ${e.value} ) -> `,e=e.next}return t}return null}};e.append(1),e.append(2),e.append(3),e.prepend(0),console.log("LinkedList:",e.toString())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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dGVudCI6WyJjbGFzcyBOb2RlIHtcbiAgICBjb25zdHJ1Y3Rvcih2YWx1ZSl7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5uZXh0ID0gbnVsbDtcbiAgICB9XG59XG5cbmNsYXNzIExpbmtlZExpc3Qge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmhlYWQgPSBudWxsO1xuICAgICAgICB0aGlzLnRhaWwgPSBudWxsO1xuICAgIH1cblxuICAgIGFwcGVuZCh2YWx1ZSkge1xuICAgICAgICBjb25zdCBuZXdOb2RlID0gbmV3IE5vZGUodmFsdWUpO1xuICAgICAgICBpZighdGhpcy5oZWFkKXtcbiAgICAgICAgICAgIC8vIElmIHRoZSBsaXN0IGlzIG51bGwvZW1wdHksIHRoZSBuZXcgbm9kZSBpcyBib3RoIHRoZSBoZWFkIGFuZCB0YWlsXG4gICAgICAgICAgICB0aGlzLmhlYWQgPSBuZXdOb2RlO1xuICAgICAgICAgICAgdGhpcy50YWlsID0gbmV3Tm9kZTtcbiAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgdGhpcy50YWlsLm5leHQgPSBuZXdOb2RlO1xuICAgICAgICAgICAgdGhpcy50YWlsID0gbmV3Tm9kZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByZXBlbmQodmFsdWUpIHtcbiAgICAgICAgY29uc3QgbmV3Tm9kZSA9IG5ldyBOb2RlKHZhbHVlKTtcbiAgICAgICAgaWYoIXRoaXMuaGVhZCkge1xuICAgICAgICAgICAgdGhpcy5oZWFkID0gbmV3Tm9kZTtcbiAgICAgICAgICAgIHRoaXMudGFpbCA9IG5ld05vZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdOb2RlLm5leHQgPSB0aGlzLmhlYWQ7XG4gICAgICAgICAgICB0aGlzLmhlYWQgPSBuZXdOb2RlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2l6ZSgpe1xuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGxldCBjdXJyZW50Tm9kZSA9IHRoaXMuaGVhZDtcbiAgICAgICAgd2hpbGUoIXRoaXMuaGVhZCl7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGk7XG4gICAgfVxuXG4gICAgaGVhZCgpe1xuICAgICAgICBpZih0aGlzLmhlYWQpe1xuICAgICAgICAgICAgY29uc3QgaGVhZE5vZGUgPSB0aGlzLmhlYWQ7XG4gICAgICAgICAgICByZXR1cm4gaGVhZE5vZGU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRhaWwoKXtcbiAgICAgICAgaWYodGhpcy50YWlsKXtcbiAgICAgICAgICAgIGNvbnN0IHRhaWxOb2RlID0gdGhpcy50YWlsO1xuICAgICAgICAgICAgcmV0dXJuIHRhaWxOb2RlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhdChpbmRleCl7XG4gICAgICAgIGlmIChpbmRleCA8IDApIHJldHVybiBudWxsOyAvLyBJbmRleCBzaG91bGQgYmUgbm9uLW5lZ2F0aXZlXG4gICAgICAgIGlmKHRoaXMuaGVhZCkge1xuICAgICAgICAgICAgbGV0IGN1cnJlbnROb2RlID0gdGhpcy5oZWFkO1xuICAgICAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAgICAgd2hpbGUoaSA8IGluZGV4KXtcbiAgICAgICAgICAgICAgICBpKys7XG4gICAgICAgICAgICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5uZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnROb2RlID8gY3VycmVudE5vZGUgOiBudWxsOyAvLyBSZXR1cm4gdGhlIG5vZGUgaWYgZm91bmQsIGVsc2UgbnVsbFxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcG9wKCl7XG4gICAgICAgIGlmICghdGhpcy50YWlsKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIk5vIGl0ZW0gdG8gcG9wXCIpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwb3BwZWRWYWx1ZSA9IHRoaXMudGFpbC52YWx1ZTtcblxuICAgICAgICBpZiAodGhpcy5oZWFkID09PSB0aGlzLnRhaWwpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZXJlJ3Mgb25seSBvbmUgbm9kZSBpbiB0aGUgbGlzdFxuICAgICAgICAgICAgdGhpcy5oZWFkID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMudGFpbCA9IG51bGw7XG4gICAgICAgICAgICByZXR1cm4gcG9wcGVkVmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY3VycmVudE5vZGUgPSB0aGlzLmhlYWQ7XG4gICAgICAgIHdoaWxlKGN1cnJlbnROb2RlLm5leHQgIT09IHRoaXMudGFpbCl7XG4gICAgICAgICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLm5leHQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTm93IGN1cnJlbnROb2RlIGlzIHRoZSBzZWNvbmQtdG8tbGFzdCBub2RlXG4gICAgICAgIGN1cnJlbnROb2RlLm5leHQgPSBudWxsO1xuICAgICAgICB0aGlzLnRhaWwgPSBjdXJyZW50Tm9kZTtcblxuICAgICAgICByZXR1cm4gcG9wcGVkVmFsdWU7XG4gICAgfVxuXG4gICAgY29udGFpbnModmFsdWUpIHtcbiAgICAgICAgbGV0IGN1cnJlbnROb2RlID0gdGhpcy5oZWFkO1xuICAgICAgICB3aGlsZShjdXJyZW50Tm9kZS5uZXh0ICE9PSBudWxsKXtcbiAgICAgICAgICAgIGlmKGN1cnJlbnROb2RlLnZhbHVlID09PSB2YWx1ZSl7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUubmV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZmluZCh2YWx1ZSkge1xuICAgICAgICBsZXQgY3VycmVudE5vZGUgPSB0aGlzLmhlYWQ7XG4gICAgICAgIGxldCBpID0gMDtcbiAgICAgICAgd2hpbGUoY3VycmVudE5vZGUpe1xuICAgICAgICAgICAgaWYoY3VycmVudE5vZGUudmFsdWUgPT09IHZhbHVlKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUubmV4dDtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKXtcbiAgICAgICAgbGV0IG91dHB1dCA9IFwiXCJcbiAgICAgICAgaWYoIXRoaXMuaGVhZCl7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW50Tm9kZSA9IHRoaXMuaGVhZDtcbiAgICAgICAgICAgIHdoaWxlKGN1cnJlbnROb2RlKXtcbiAgICAgICAgICAgICAgICBpZihjdXJyZW50Tm9kZS5uZXh0ID09PSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG91dHB1dCArPSBcIm51bGxcIiA7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0ICs9IGAoICR7Y3VycmVudE5vZGUudmFsdWV9ICkgLT4gYDtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE5vZGUgPSBjdXJyZW50Tm9kZS5uZXh0XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY29uc3QgbGlzdCA9IG5ldyBMaW5rZWRMaXN0KCk7XG4gICAgbGlzdC5hcHBlbmQoMSk7XG4gICAgbGlzdC5hcHBlbmQoMik7XG4gICAgbGlzdC5hcHBlbmQoMyk7XG4gICAgbGlzdC5wcmVwZW5kKDApO1xuXG4gICAgY29uc29sZS5sb2coJ0xpbmtlZExpc3Q6JywgbGlzdC50b1N0cmluZygpKTtcblxuIl0sIm5hbWVzIjpbIk5vZGUiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwidGhpcyIsIm5leHQiLCJsaXN0IiwiaGVhZCIsInRhaWwiLCJhcHBlbmQiLCJuZXdOb2RlIiwicHJlcGVuZCIsInNpemUiLCJpIiwiY3VycmVudE5vZGUiLCJhdCIsImluZGV4IiwicG9wIiwiY29uc29sZSIsImxvZyIsInBvcHBlZFZhbHVlIiwiY29udGFpbnMiLCJmaW5kIiwidG9TdHJpbmciLCJvdXRwdXQiXSwic291cmNlUm9vdCI6IiJ9